plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'pmd'

    // https://mooltiverse.github.io/nyx/guide/user/
    // https://github.com/mooltiverse/nyx
    id "com.mooltiverse.oss.nyx" version "1.2.2"
}

def checkstyleVersion = '10.3.4'
def pmdVersion = '6.50.0'

group = 'osz.imt.mts'
version = rootProject.file('version').text.trim()
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'osz.imt.mts.mts11umfrage.Mts11UmfrageApplication'
        )
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.session:spring-session-data-redis:2.7.0'
//    implementation 'org.springframework.session:spring-session-jdbc:2.7.0'
//    implementation 'org.springframework.session:spring-session:1.3.5.RELEASE'

    compileOnly 'org.projectlombok:lombok'
//    compile 'log4j:log4j:1.2.17'

    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    // https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf
    implementation 'org.thymeleaf:thymeleaf:3.0.15.RELEASE'
// https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5
    implementation 'org.thymeleaf:thymeleaf-spring5:3.0.15.RELEASE'
    // https://mvnrepository.com/artifact/org.webjars/bootstrap
    implementation 'org.webjars:bootstrap:5.2.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // https://mvnrepository.com/artifact/org.testcontainers/testcontainers
    testImplementation 'org.testcontainers:testcontainers:1.17.5'


}

tasks.named('test') {
    useJUnitPlatform()
}


// Checkstyle - https://github.com/checkstyle/checkstyle
checkstyle {
    // Config is downloaded from https://github.com/checkstyle/checkstyle/releases
    // It's in the folder src/main/resources/google_checks.xml
    toolVersion = checkstyleVersion
    configFile = file('config/checkstyle/google_checks.xml')
    configProperties = ["suppressionFile": file('config/checkstyle/suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
}

checkstyleTest.enabled = false
pmdTest.enabled = false
// PMD
pmd {
    toolVersion = pmdVersion
    ruleSetFiles = files("config/pmd/pmd.xml")
    // ruleSets variable needs to be emptied or else the gradle plugin will use the basic ruleset
    // and some rules cannot be excluded.
    ruleSets = []
//    sourceSets = [sourceSets.main]
    ignoreFailures = true // TODO:Nach der Umstrukturierung
}


nyx {
    // todo(Stefan/Jack): decide on strategy.

    changelog {
        path = 'build/CHANGELOG.md'
        sections = [
                'Added': '^feat$',
                'Fixed': '^fix$',
        ]
        substitutions = [
                '(?m)#([0-9]+)(?s)': '[#%s](https://github.com/JacekLangerTUDA/MTS11-Renten-Umfrage/issues)'
        ]
    }

    releaseTypes {
        publicationServices = ['github']
        enabled = ['mainline', 'internal']
        items {
            mainline {
                description = '{{#file.content}}build/CHANGELOG.md{{/file.content}}'
                collapseVersions = false
                filterTags = '^()?([0-9]\\d*)\\.([0-9]\\d*)\\.([0-9]\\d*)$'
                gitCommit = 'true'
                gitCommitMessage = 'Release version '
                gitPush = 'true'
                gitTag = 'true'
                gitTagMessage = 'Tag release '
                matchBranches = '^(master|main)$'
                matchEnvironmentVariables {
                    CI = '^true$'
                }
                matchWorkspaceStatus = 'CLEAN'
                publish = 'true'
                versionRangeFromBranchName = false
            }
            internal {
                collapseVersions = false
                collapsedVersionQualifier = 'internal'
                description = 'Internal release '
                filterTags = '^()?([0-9]\\d*)\\.([0-9]\\d*)\\.([0-9]\\d*)$'
                gitCommit = 'false'
                gitPush = 'false'
                gitTag = 'false'
                identifiers {
                    '0' {
                        position = 'BUILD'
                        qualifier = 'branch'
                        value = ''
                    }
                    '1' {
                        position = 'BUILD'
                        qualifier = 'commit'
                        value = ''
                    }
                    '2' {
                        position = 'BUILD'
                        qualifier = 'timestamp'
                        value = ''
                    }
                    '3' {
                        position = 'BUILD'
                        qualifier = 'user'
                        value = ''
                    }
                }
                publish = 'false'
                versionRangeFromBranchName = false
            }
        }

    }
    services {
        github {
            type = 'GITHUB'
            options {
                AUTHENTICATION_TOKEN = '{{#environment.variable}}REGISTRY_TOKEN{{/environment.variable}}'
                REPOSITORY_NAME = 'MTS11-Renten-Umfrage'
                REPOSITORY_OWNER = 'JacekLangerTUDA'
            }
        }
    }

    commitMessageConventions {
        enabled = ['conventionalCommits']
        items {
            conventionalCommits {

                expression = '(?m)^(?<type>[a-zA-Z0-9_]+)(!)?(\\\\((?<scope>[a-z ]+)\\\\))?:( (?<title>.+))$(?s).*'
                bumpExpressions {
                    major = '(?s)(?m)^[a-zA-Z0-9_]+(!|.*^(BREAKING( |-)CHANGE: )).*'
                    minor = '(?s)(?m)^feat(?!!|.*^(BREAKING( |-)CHANGE: )).*'
                    patch = '(?s)(?m)^fix(?!!|.*^(BREAKING( |-)CHANGE: )).*'
                }
            }
        }
    }
    dryRun = false
    initialVersion = rootProject.file('version').text.trim()
    verbosity = "INFO"
    scheme = 'SEMVER'
}